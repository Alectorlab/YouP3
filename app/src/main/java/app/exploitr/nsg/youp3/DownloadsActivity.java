package app.exploitr.nsg.youp3;

import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;

import com.koushikdutta.ion.Ion;

import org.apache.commons.io.FilenameUtils;

import java.io.File;
import java.util.ArrayList;

import model.DownloadsAdapter;
import model.VideoInfo;
import realm.DownloadHistoryManager;
import realm.RealmController;
import utils.L;
import utils.NotifyCall;

import static utils.L.getMimeType;

public class DownloadsActivity extends AppCompatActivity {

    Handler mHandler;
    Runnable mHandlerTask;
    RecyclerView recyclerView;
    DownloadsAdapter adapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_downloads);


        mHandler = new Handler();

        if (getSupportActionBar() != null)
            getSupportActionBar().setTitle("Downloads (" + new DownloadHistoryManager().getTotalInfoCount() + ")");


        recyclerView = (RecyclerView) findViewById(R.id.downloadedItems);


        if (new DownloadHistoryManager().getTotalInfoCount() == 0) {
            recyclerView.setVisibility(View.GONE);
            findViewById(R.id.noDownloadsText).setVisibility(View.VISIBLE);
        } else {
            recyclerView.setVisibility(View.VISIBLE);
            findViewById(R.id.noDownloadsText).setVisibility(View.GONE);
        }

        recyclerView.setLayoutManager(new LinearLayoutManager(DownloadsActivity.this));

        adapter = new DownloadsAdapter(DownloadsActivity.this, getInfosInArrayList());
        adapter.setClickListener(new DownloadsAdapter.ItemClickListener() {
            @Override
            public void onCancelClick(View view, final int id, String name, final String path) {

                L.verb(id + "/" + name + "/" + path);

                if (new DownloadHistoryManager().isDownloadCompleted(id)) {
                    new AlertDialog.Builder(DownloadsActivity.this)
                            .setTitle("Delete Download History")
                            .setMessage("Delete Entry For " + FilenameUtils.getBaseName(path) + " ?")
                            .setPositiveButton("Okay", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    new DownloadHistoryManager().removeInfoById(id);
                                    adapter = new DownloadsAdapter(DownloadsActivity.this, getInfosInArrayList());
                                    recyclerView.setAdapter(adapter);
                                }
                            }).show();
                } else {

                    new AlertDialog.Builder(DownloadsActivity.this)
                            .setTitle("Stop Download")
                            .setMessage("Stop Downloading " + name + " ?")
                            .setPositiveButton("Okay", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {

                                    new NotifyCall(getApplicationContext(), "", "").cancelAll();

                                    if (! new DownloadHistoryManager().isDownloadCompleted(id)) {
                                        Ion.getDefault(getBaseContext()).cancelAll(id);
                                    }

                                    new DownloadHistoryManager().removeInfoById(id);
                                    adapter = new DownloadsAdapter(DownloadsActivity.this, getInfosInArrayList());
                                    recyclerView.setAdapter(adapter);

                                }
                            }).show();
                }
            }

            @Override
            public void onOpenClick(View view, final int id, String path) {

                L.verb(id + "/" + path);
                File xyz = new File(path);

                if (xyz.exists()) {

                    Intent intent = new Intent(Intent.ACTION_VIEW);
                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    String[] pat = path.split("/");
                    path = pat[pat.length - 1];
                    intent.setDataAndType(Uri.fromFile(xyz), getMimeType(path));

                    startActivity(Intent.createChooser(intent, "Choose a way to open"));

                } else {
                    Snackbar.make(getWindow().getDecorView(), "File doesn't exists!", Snackbar.LENGTH_LONG)
                            .setAction("Remove", new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    new DownloadHistoryManager().removeInfoById(id);
                                    adapter = new DownloadsAdapter(DownloadsActivity.this, getInfosInArrayList());
                                    recyclerView.setAdapter(adapter);
                                }
                            }).show();
                }
            }
        });

        adapter.notifyDataSetChanged();
        recyclerView.setAdapter(adapter);

        mHandlerTask = new Runnable() {
            @Override
            public void run() {
                if (getSupportActionBar() != null)
                    getSupportActionBar().setTitle("Downloads (" + new DownloadHistoryManager().getTotalInfoCount() + ")");

                mHandler.postDelayed(mHandlerTask, 200); // decreasing anymore will make ui laggy
            }
        };

        mHandlerTask.run();

    }

    @Override
    protected void onDestroy() {
        mHandler.removeCallbacks(mHandlerTask);
        super.onDestroy();
    }

    private ArrayList<String> getInfosInArrayList() {
        ArrayList<String> all = new ArrayList<>();
        for (VideoInfo info : new RealmController().getVideoInfos()) {
            all.add(info.getId() + "," + info.getName() + "," + info.getPath() + "," + info.getSize());
        }
        return all;
    }

    @Override
    public void finish() {
        overridePendingTransition(R.anim.enter, R.anim.exit);
        super.finish();
    }
}
