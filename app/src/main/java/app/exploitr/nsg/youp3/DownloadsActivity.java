package app.exploitr.nsg.youp3;

import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.support.design.widget.Snackbar;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.downloader.PRDownloader;
import com.downloader.Status;

import org.apache.commons.io.FilenameUtils;

import java.io.File;
import java.util.ArrayList;
import java.util.Objects;

import downloader.utils.BasicDownloader;
import downloads.DownloadHistoryManager;
import downloads.DownloadsAdapter;
import downloads.RealmController;
import downloads.VideoInfo;
import utils.Helper;

@SuppressLint("InflateParams")

public class DownloadsActivity extends AppCompatActivity {

    private Handler mHandler;
    private Runnable mHandlerTask;
    private DownloadsAdapter adapter;
    private RecyclerView recyclerView;
    private BroadcastReceiver receiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, final Intent intent) {
            if (Objects.equals(BasicDownloader.DOWNLOAD_STARTED_FAILED_UNKNOWN, intent.getAction())) {
                if (adapter != null) {
                    notifyDataSetChanged();
                }
            } else if (Objects.equals(BasicDownloader.DOWNLOAD_PROGRESS_CHANGED, intent.getAction())) {
                recyclerView.post(new Runnable() {
                    @Override
                    public void run() {
                        int progress = intent.getIntExtra("progress", 0);
                        int id = intent.getIntExtra("id", 0);
                        for (int i = 0; i < new RealmController().getVideoInfos().size(); i++) {
                            if (new RealmController().getVideoInfo(id) != null) {
                                if (recyclerView.findViewHolderForAdapterPosition(i) != null) {
                                    View total = recyclerView.findViewHolderForAdapterPosition(i).itemView;
                                    if (id == Integer.parseInt(
                                            ((TextView) total.findViewById(R.id.file_id)).getText().toString())) {
                                        ProgressBar progressBar = total.findViewById(R.id.progress);
                                        progressBar.setProgress(progress);
                                    }
                                }
                            }
                        }
                    }
                });
            }
        }
    };


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_downloads);

        mHandler = new Handler();

        if (getSupportActionBar() != null) {
            getSupportActionBar().setTitle("Downloads (" + new DownloadHistoryManager().getTotalInfoCount() + ")");
        }

        IntentFilter filter = new IntentFilter();
        filter.addAction(BasicDownloader.DOWNLOAD_STARTED_FAILED_UNKNOWN);
        filter.addAction(BasicDownloader.DOWNLOAD_PROGRESS_CHANGED);
        LocalBroadcastManager.getInstance(getBaseContext()).registerReceiver(receiver, filter);

        recyclerView = findViewById(R.id.downloadedItems);

        if (new DownloadHistoryManager().getTotalInfoCount() == 0) {
            recyclerView.setVisibility(View.GONE);
            findViewById(R.id.noDownloadsText).setVisibility(View.VISIBLE);
        } else {
            recyclerView.setVisibility(View.VISIBLE);
            findViewById(R.id.noDownloadsText).setVisibility(View.GONE);
        }

        recyclerView.setLayoutManager(new LinearLayoutManager(DownloadsActivity.this));
        adapter = new DownloadsAdapter(DownloadsActivity.this, getInfoInArrayList());

        adapter.setClickListener(new DownloadsAdapter.ItemClickListener() {
            @Override
            public void onCancelClick(View view, final int id, String name, final String path) {
                Helper.verb(id + "/" + name + "/" + path);
                new AlertDialog.Builder(DownloadsActivity.this)
                        .setTitle("Delete Download History")
                        .setMessage("Delete Entry For " + FilenameUtils.getBaseName(path) + " ?")
                        .setPositiveButton("Okay", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                if (new File(path).canWrite() && new RealmController().getVideoInfo(id).isCompleted()) {
                                    if (new File(path).delete()) {
                                        new DownloadHistoryManager().removeInfoById(id);
                                        recreate();
                                    } else {
                                        Snackbar.make(getWindow().getDecorView(),
                                                "Can't delete, can't access file",
                                                Snackbar.LENGTH_LONG)
                                                .setAction("Remove Entry", new View.OnClickListener() {
                                                    @Override
                                                    public void onClick(View v) {
                                                        new DownloadHistoryManager().removeInfoById(id);
                                                        recreate();
                                                    }
                                                }).show();
                                    }
                                } else if (PRDownloader.getStatus(id) == Status.RUNNING) {
                                    Snackbar.make(getWindow().getDecorView(),
                                            "Download Running, cancel it?",
                                            Snackbar.LENGTH_LONG)
                                            .setAction("Remove Entry", new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    PRDownloader.cancel(id);
                                                    new DownloadHistoryManager().removeInfoById(id);
                                                    recreate();
                                                }
                                            }).show();
                                } else if (PRDownloader.getStatus(id) == Status.PAUSED) {
                                    Snackbar.make(getWindow().getDecorView(),
                                            "Download Paused, cancel it?",
                                            Snackbar.LENGTH_LONG)
                                            .setAction("Remove Entry", new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    PRDownloader.cancel(id);
                                                    new DownloadHistoryManager().removeInfoById(id);
                                                    recreate();
                                                }
                                            }).show();
                                } else if (PRDownloader.getStatus(id) == Status.QUEUED) {
                                    Snackbar.make(getWindow().getDecorView(),
                                            "Download Queued, cancel it?",
                                            Snackbar.LENGTH_LONG)
                                            .setAction("Remove Entry", new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    PRDownloader.cancel(id);
                                                    new DownloadHistoryManager().removeInfoById(id);
                                                    recreate();
                                                }
                                            }).show();
                                } else {
                                    Snackbar.make(getWindow().getDecorView(),
                                            "Can't delete, maybe previously deleted!",
                                            Snackbar.LENGTH_LONG)
                                            .setAction("Remove Entry", new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    new DownloadHistoryManager().removeInfoById(id);
                                                    recreate();
                                                }
                                            }).show();
                                }
                            }
                        }).show();
            }

            @Override
            public void onOpenClick(View view, final int id, String path) {
                Helper.verb(id + "/" + path);
                File xyz = new File(path);
                if (xyz.exists()) {
                    MediaPlayer.getInstance(xyz).play(DownloadsActivity.this);
                } else {
                    Snackbar.make(getWindow().getDecorView(), "File doesn't exists!", Snackbar.LENGTH_LONG)
                            .setAction("Remove", new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    new DownloadHistoryManager().removeInfoById(id);
                                    recreate();
                                }
                            }).show();
                }
            }

            @Override
            public void onStartPauseClick(View view, int id, String name) {
                ImageButton button = (ImageButton) view;
                if (PRDownloader.getStatus(id) == Status.PAUSED) {
                    button.setImageResource(R.drawable.ic_pause);
                    PRDownloader.resume(id);
                } else if (PRDownloader.getStatus(id) == Status.RUNNING) {
                    button.setImageResource(R.drawable.ic_start);
                    PRDownloader.pause(id);
                } else if (PRDownloader.getStatus(id) == Status.COMPLETED) {
                    view.setVisibility(View.GONE);
                } else {
                    Toast.makeText(DownloadsActivity.this, "\nUnknown Error, please remove entry\n", Toast.LENGTH_SHORT).show();
                }
            }
        });

        adapter.setLongClickListener(new DownloadsAdapter.ItemLongClickListener() {
            @Override
            public void onOpenClick() {
                new AlertDialog.Builder(DownloadsActivity.this)
                        .setTitle("Open File")
                        .setMessage("\nClicking button will open the file\n")
                        .show();
            }

            @Override
            public void onStartPauseClick() {
                new AlertDialog.Builder(DownloadsActivity.this)
                        .setTitle("Start/Pause Download")
                        .setMessage("\nInverts Download State\n")
                        .show();
            }

            @Override
            public void onCancelClick() {
                new AlertDialog.Builder(DownloadsActivity.this)
                        .setTitle("Delete File/Cancel Download")
                        .setMessage("\nClicking button will delete this file from disk!!\n")
                        .show();
            }
        });

        recyclerView.setAdapter(adapter);
        adapter.notifyDataSetChangedCustom();

        mHandlerTask = new Runnable() {
            @Override
            public void run() {
                if (getSupportActionBar() != null)
                    getSupportActionBar().setTitle("Downloads (" + new DownloadHistoryManager().getTotalInfoCount() + ")");
                mHandler.postDelayed(mHandlerTask, 200); // decreasing anymore will make ui laggy
            }
        };
        mHandlerTask.run();

    }

    @Override
    protected void onDestroy() {
        mHandler.removeCallbacks(mHandlerTask);
        LocalBroadcastManager.getInstance(getBaseContext()).unregisterReceiver(receiver);
        super.onDestroy();
    }

    private ArrayList<String> getInfoInArrayList() {
        ArrayList<String> all = new ArrayList<>();
        for (VideoInfo info : new RealmController().getVideoInfos()) {
            all.add(info.getId() +
                    "," +
                    info.getName() +
                    "," +
                    info.getPath() +
                    "," +
                    info.getSize() +
                    "," +
                    info.getProgress() +
                    "," +
                    info.isCompleted()
            );
        }
        return all;
    }

    @Override
    public void finish() {
        overridePendingTransition(R.anim.enter, R.anim.exit);
        super.finish();
    }

    private void notifyDataSetChanged() {
        recreate();
    }

}
