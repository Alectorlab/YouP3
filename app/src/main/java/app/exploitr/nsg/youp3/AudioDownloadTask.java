package app.exploitr.nsg.youp3;

import android.content.Context;
import android.content.DialogInterface;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Environment;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AlertDialog;
import android.view.View;

import com.crashlytics.android.Crashlytics;
import com.koushikdutta.ion.Ion;

import org.json.JSONException;
import org.json.JSONObject;

/**
 * Created by exploitr on 14-08-2017.
 * <p>
 * TODO
 */

class AudioDownloadTask extends AsyncTask<String, String, JSONObject> {

    private Context mContext;
    private View mView;

    private boolean error = false;
    private String videoId;
    private String title;
    private Long fileSize;
    private Integer bitrate;

    private JSONObject response;

    private String link, responseString;

    AudioDownloadTask(View screenView, String videoID) {
        this.mContext = screenView.getContext();
        this.mView = screenView;
        this.videoId = videoID;
    }


    @Override
    protected JSONObject doInBackground(String... params) {

        try {
            responseString = Ion.with(mContext).load("http://www.youtubeinmp3.com/fetch/?format=JSON&bitrate=1&filesize=1&video=" + videoId).asString().get();
        } catch (Exception e) {
            e.printStackTrace();
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                e.getSuppressed();
            }
        }

        try {
            response = new JSONObject(responseString);
        } catch (JSONException e) {
            e.printStackTrace();
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                e.getSuppressed();
            }
        }
        return response;
    }

    @Override
    protected void onPostExecute(JSONObject response) {

        StringBuilder all = new StringBuilder();

        try {
            title = response.getString("title");
            title = title.replaceAll("[^a-zA-Z0-9.-]", " ").replaceAll("^ +| +$|( )+", "$1");
            link = response.getString("link");
            fileSize = response.getLong("filesize");
            bitrate = response.getInt("bitrate");
        } catch (Exception e) {
            e.printStackTrace();
            Crashlytics.log("Mp3-Only Mode Was Enabled");
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                e.getSuppressed();
            }
            Snackbar.make(mView, "Error Occurred // Retry -OR- disable MP3-Only Mode", Snackbar.LENGTH_LONG).show();
            error = true;
        }

        if (title != null)
            all.append("Do you want to download the music from this video ? \n\n" + "Information : \nName : ").append(title);
        if (fileSize != null)
            all.append("\nFilesize : ").append((fileSize / 1048576) + 1).append(" mb");
        if (bitrate != null)
            all.append("\nBitrate : ")
                    .append(bitrate)
                    .append("\n\nDownload Location : ")
                    .append(Environment.getExternalStorageDirectory().getPath())
                    .append("/YouP3/");


        final AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
        builder.setTitle("New Download Task :");
        builder.setMessage(all.toString());

        builder.setPositiveButton("Yup!", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                new Mp3Downloader(title, mContext, mView).execute(link);
            }
        });
        builder.setNegativeButton("Nope", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        AlertDialog alert = builder.create();
        if (!error) {
            alert.show();
        }
    }
}
