package app.exploitr.nsg.youp3;


import android.Manifest;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.net.Uri;
import android.net.http.SslError;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.constraint.ConstraintLayout;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.v4.app.NotificationManagerCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.SearchView;
import android.support.v7.widget.SwitchCompat;
import android.support.v7.widget.Toolbar;
import android.util.DisplayMetrics;
import android.util.SparseArray;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.webkit.SslErrorHandler;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceRequest;
import android.webkit.WebResourceResponse;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.CompoundButton;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.Toast;

import com.comix.overwatch.HiveProgressView;
import com.crashlytics.android.Crashlytics;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionButton;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionHelper;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionLayout;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RFACLabelItem;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RapidFloatingActionContentLabelList;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.lang.ref.WeakReference;
import java.net.URLEncoder;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

import Book.BookMark;
import Book.BookMarkManager;
import Book.BookRealmController;
import Book.Launcher;
import Book.VideoScreen;
import at.huber.youtubeExtractor.VideoMeta;
import at.huber.youtubeExtractor.YouTubeExtractor;
import at.huber.youtubeExtractor.YtFile;
import downloader.utils.DownloadExecutorService;
import downloader.utils.Queue;
import downloader.utils.QueueObject;
import downloads.RealmController;
import downloads.VideoInfo;
import io.fabric.sdk.android.Fabric;
import io.realm.Realm;
import utils.DataStore;
import utils.Helper;

import static app.exploitr.nsg.youp3.R.id.settings;
import static utils.Helper.clearCookies;
import static utils.Helper.getFormattedVideoItemString;
import static utils.Helper.getMail;
import static utils.Helper.verb;

@SuppressWarnings({"FieldCanBeLocal", "unused"})
@SuppressLint({"SetJavaScriptEnabled", "InflateParams", "StaticFieldLeak"})
public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener, RapidFloatingActionContentLabelList.OnRapidFloatingActionContentLabelListListener {


    public static final boolean isBuildFinal = false;
    private static final int REQUEST_CODE_PERMISSION = 120;
    private boolean canceled = false;
    private WebView mainView;
    private DrawerLayout drawer;
    private HiveProgressView indicator;
    private String urlAll, urlTitle;
    private String[] perms = new String[]{
            Manifest.permission.INTERNET,
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.ACCESS_NETWORK_STATE,
            Manifest.permission.GET_ACCOUNTS,
            Manifest.permission.VIBRATE
    };
    private RapidFloatingActionLayout rfaLayout;
    private RapidFloatingActionButton rfaBtn;
    private RapidFloatingActionHelper rfabHelper;
    private RapidFloatingActionContentLabelList rfaContent;
    private List<String> paw = new ArrayList<>();

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.activity_main);

        final Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        if (isBuildFinal) {
            Fabric.with(this, new Crashlytics());
            setUserForLogging(); // you know what you're doing
        }

        Realm.init(this);

        mainView = new WebView(MainActivity.this);
        ConstraintLayout lala = findViewById(R.id.main);
        DisplayMetrics displaymetrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
        int screenWidth = displaymetrics.widthPixels;
        int screenHeight = displaymetrics.heightPixels;
        lala.addView(mainView, 0,
                new ConstraintLayout.LayoutParams(
                        screenWidth,
                        screenHeight));

        //Init Done

        if (DataStore.getInstance(getBaseContext()).isFullScreen()) {
            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        }

        if (DataStore.getInstance(getBaseContext()).isRemoveToolbar()) {
            if (getSupportActionBar() != null) getSupportActionBar().hide();
        } else {
            if (getSupportActionBar() != null) getSupportActionBar().show();
        }

        indicator = findViewById(R.id.indicator);

        if (!Helper.isNetworkAvailable(MainActivity.this)) {
            mainView.destroy();
            new AlertDialog.Builder(MainActivity.this)
                    .setTitle("Network Error :")
                    .setMessage("\nCan't Connect To Server")
                    .setCancelable(false)
                    .setPositiveButton("Exit", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                                finishAndRemoveTask();
                            } else finish();
                        }
                    }).show();
        }


        rfaLayout = findViewById(R.id.activity_main_rfal);
        rfaBtn = findViewById(R.id.activity_main_rfab);
        rfaContent = new RapidFloatingActionContentLabelList(MainActivity.this);
        rfaContent.setOnRapidFloatingActionContentLabelListListener(this);
        List<RFACLabelItem> items = new ArrayList<>();
        items.add(new RFACLabelItem<Integer>()
                .setLabel("Share Link Of This Video")
                .setResId(R.drawable.ic_share_video)
                .setIconNormalColor(0xffd84315)
                .setIconPressedColor(0xffbf360c)
                .setWrapper(0)
        );
        items.add(new RFACLabelItem<Integer>()
                .setLabel("Fetch Downloadable File(s) Details")
                .setResId(R.drawable.ic_file_download)
                .setIconNormalColor(0xff4e342e)
                .setIconPressedColor(0xff3e2723)
                .setWrapper(1)
        );
        rfaContent.setItems(items);
        rfabHelper = new RapidFloatingActionHelper(MainActivity.this, rfaLayout, rfaBtn, rfaContent);
        rfabHelper = new RapidFloatingActionHelper(
                MainActivity.this,
                rfaLayout,
                rfaBtn,
                rfaContent
        ).build();


        /*Let's talk what we need*/
        for (String perm : perms) {
            if (ContextCompat.checkSelfPermission(getApplicationContext(), perm) != PackageManager.PERMISSION_GRANTED) {
                paw.add(perm);
            }
        }

        if (paw.size() != 0) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                requestPermissions(paw.toArray(new String[0]), REQUEST_CODE_PERMISSION);
            }
        }
        /*dare done*/

        checkFilePermsOkay(MainActivity.this);

        drawer = findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        final NavigationView navigationView = findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        mainView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);

        WebSettings settings = mainView.getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setCacheMode(WebSettings.LOAD_NO_CACHE);
        settings.setAppCacheEnabled(false);
        settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);
        settings.setUseWideViewPort(true);
        settings.setSupportZoom(true);
        settings.setDisplayZoomControls(true);
        settings.setMediaPlaybackRequiresUserGesture(true);
        settings.setLoadWithOverviewMode(true);
        settings.setBuiltInZoomControls(true);
        settings.setUseWideViewPort(true);

        setDeskTopMode(mainView.getSettings(), DataStore.getInstance(getBaseContext()).isDeskModeEnabled());

        mainView.setWebChromeClient(new WebChromeClient() {
            @Override
            public void onReceivedTitle(WebView view, String pageTitle) {
                if (!pageTitle.equals("YouTube") && DataStore.getInstance(getBaseContext()).isDeskModeEnabled()) {
                    toolbar.setSubtitle(pageTitle);
                } else {
                    toolbar.setSubtitle("");
                }
            }
        });

        startService(new Intent(MainActivity.this, DownloadExecutorService.class));

        /*
        Add ability to parse shared link
          */
        if (Objects.equals(getIntent().getAction(), Intent.ACTION_VIEW)) {
            //User gave me some data / let's process it.
            final String localLink = getIntent().getDataString();
            if (localLink != null) {
                if (localLink.contains("youtu.be")) {
                    mainView.loadUrl("https://www.youtube.com/watch?v=" + localLink.split("be/")[1]);
                } else {
                    mainView.loadUrl(localLink);
                }
            }
            Snackbar.make(rfaLayout, "Loading Given YouTube URL", Snackbar.LENGTH_SHORT).show();
        } else {
            mainView.loadUrl("https://www.youtube.com/");
        }

        mainView.setWebViewClient(new WebViewClient() {

            @Override
            public void onPageFinished(WebView view, String url) {
                mainView.setVisibility(View.VISIBLE);
                indicator.setVisibility(View.INVISIBLE);
                rfaLayout.setVisibility(View.VISIBLE);
                verb(url);
            }

            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon) {
                indicator.setVisibility(View.VISIBLE);
                mainView.setVisibility(View.INVISIBLE);
                rfaLayout.setVisibility(View.INVISIBLE);
                if (url.contains("m.youtube") && DataStore.getInstance(getBaseContext()).isDeskModeEnabled()) {
                    String[] cow1 = url.split("m.");
                    url = "https://www." + cow1[1];
                    mainView.loadUrl(url);
                }
                if (url.contains("account")) {
                    getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
                } else {
                    getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);
                }
            }

            @Override
            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                handler.proceed();
            }

            @TargetApi(Build.VERSION_CODES.LOLLIPOP)
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, final WebResourceRequest request) {
                if ((!(request.getUrl().toString().contains("youtube") | request.getUrl().toString().contains("google")))) {
                    new AlertDialog.Builder(MainActivity.this)
                            .setMessage("YouP3 will forward external urls to browser?!?")
                            .setCancelable(false)
                            .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    Intent intent = new Intent(Intent.ACTION_VIEW);
                                    intent.setData(request.getUrl());
                                    startActivity(intent);
                                }
                            })
                            .setNegativeButton("Back", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    if (mainView.canGoBack()) {
                                        mainView.goBack();
                                    }
                                }
                            }).show();
                }
                return super.shouldOverrideUrlLoading(view, request);
            }

            @Override
            public boolean shouldOverrideUrlLoading(WebView view, final String url) {
                if ((!(url.contains("youtube") | url.contains("google")))) {
                    new AlertDialog.Builder(MainActivity.this)
                            .setMessage("YouP3 will forward external urls to browser?!?")
                            .setCancelable(false)
                            .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    Intent intent = new Intent(Intent.ACTION_VIEW);
                                    intent.setData(Uri.parse(url));
                                    startActivity(intent);
                                }
                            })
                            .setNegativeButton("Back", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    if (mainView.canGoBack()) {
                                        mainView.goBack();
                                    }
                                }
                            }).show();
                }
                return super.shouldOverrideUrlLoading(view, url);
            }

            @TargetApi(Build.VERSION_CODES.LOLLIPOP)
            @Override
            public WebResourceResponse shouldInterceptRequest(WebView view, final WebResourceRequest request) {
                if (request.getUrl().toString().matches(".*googlevideo.com/videoplayback.*")) {
                    new Handler(Looper.getMainLooper()).post(new Runnable() {
                        @Override
                        public void run() {
                            String urlBob = request.getUrl().toString().replaceAll("&range=[\\d-]*&", "&");
                            if (urlBob.contains("mime=audio") && urlBob.contains("buf=0")) {
                                urlAll = urlBob;
                                urlTitle = mainView.getUrl();
                            }
                        }
                    });
                }
                return super.shouldInterceptRequest(view, request);
            }

            @SuppressWarnings("deprecation")
            @Override
            public WebResourceResponse shouldInterceptRequest(WebView view, final String url) {
                if (url.matches(".*googlevideo.com/videoplayback.*")) {
                    new Handler(Looper.getMainLooper()).post(new Runnable() {
                        @Override
                        public void run() {
                            String urlBob = url.replaceAll("&range=[\\d-]*&", "&");
                            if (urlBob.contains("mime=audio") && urlBob.contains("buf=0")) {
                                urlAll = urlBob;
                                urlTitle = mainView.getUrl();
                            }
                        }
                    });
                }
                return super.shouldInterceptRequest(view, url);
            }

        });

        final SearchView searchView = findViewById(R.id.search_bar_main);
        searchView.setQueryHint("How to make stuffs like....");
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                if (!query.equals("")) {
                    try {
                        mainView.loadUrl("https:www.youtube.com/results?search_query=" +
                                URLEncoder.encode(query, "UTF-8"));
                    } catch (Exception e) {
                        e.printStackTrace();
                        e.getSuppressed();
                    }
                } else {
                    Toast.makeText(getApplicationContext(), "Please enter some text to search.", Toast.LENGTH_SHORT).show();
                }
                searchView.clearFocus();
                findViewById(R.id.main).requestFocus();
                return true;
            }

            @Override
            public boolean onQueryTextChange(final String newText) {
                new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        if (DataStore.getInstance(getBaseContext()).isAutoSearchEnabled()) {
                            if (!newText.equals("")) {
                                try {
                                    mainView.loadUrl("https:www.youtube.com/results?search_query=" +
                                            URLEncoder.encode(newText, "UTF-8"));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    e.getSuppressed();
                                }
                            } else if (newText.equals("")) {
                                mainView.loadUrl("https:www.youtube.com/");
                            }
                        }
                    }
                }, 500);
                return true;
            }
        });


        if (DataStore.getInstance(getBaseContext()).isNewUser()) {
            View bot = getLayoutInflater().inflate(R.layout.normal_advanced_mode_alert, null);
            final Switch basic = bot.findViewById(R.id.basic_mode);
            final Switch advanced = bot.findViewById(R.id.advanced_mode);

            advanced.setChecked(true);//everyone may wanna try

            basic.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        advanced.setChecked(false);
                    }
                }
            });

            advanced.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        basic.setChecked(false);
                    }
                }
            });

            new AlertDialog.Builder(MainActivity.this)
                    .setView(bot)
                    .setTitle("Choose One Download Method | Changeable Later")
                    .setPositiveButton("Done", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            if (!basic.isChecked()) {
                                DataStore.getInstance(getBaseContext()).setAdvancedDownloadMode(true);
                            }
                            new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    new AlertDialog.Builder(MainActivity.this)
                                            .setTitle("Sign-In?")
                                            .setMessage("Would you like to sign in into YouTube for a personalized experience?")
                                            .setNegativeButton("Privacy Policy", new DialogInterface.OnClickListener() {
                                                @Override
                                                public void onClick(DialogInterface dialog, int which) {
                                                    startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://github.com/ExploiTR/YouP3/blob/master/privacy.md")));
                                                }
                                            })
                                            .setPositiveButton("Why not?", new DialogInterface.OnClickListener() {
                                                @Override
                                                public void onClick(DialogInterface dialog, int which) {
                                                    mainView.loadUrl(
                                                            "https://accounts.google.com/" +
                                                                    "signin/v2/identifier?passive=true" +
                                                                    "&service=youtube&hl=en&uilel=3" +
                                                                    "&continue=https%3A%2F%2Fwww.youtube.com" +
                                                                    "%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Dmobile" +
                                                                    "%26next%3D%252F%26hl%3Den&flowName=GlifWebSignIn" +
                                                                    "&flowEntry=ServiceLogin"
                                                    );
                                                }
                                            })
                                            .show();
                                }
                            }, 2000);
                            DataStore.getInstance(getBaseContext()).setNewUserNoMore();
                        }
                    })
                    .setCancelable(false)
                    .show();
        }

        Spinner spinner = (Spinner) navigationView.getMenu().findItem(R.id.go_all).getActionView();
        spinner.setAdapter(new ArrayAdapter<>(this, android.R.layout.simple_spinner_dropdown_item, new String[]{
                "Trending",
                "LifeStyle",
                "Music",
                "Sports",
                "Gaming",
                "Movies",
                "News",
                "Live",
                "VR"
        }));
        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (position == 0) { //I REALLY DON'T TRUST SWITCH CLAUSES
                    mainView.loadUrl("https://www.youtube.com/feed/trending");
                } else if (position == 1) {
                    mainView.loadUrl("https://www.youtube.com/channel/UC1vGae2Q3oT5MkhhfW8lwjg");
                } else if (position == 2) {
                    mainView.loadUrl("https://www.youtube.com/channel/UC-9-kyTW8ZkZNDHQJ6FgpwQ");
                } else if (position == 3) {
                    mainView.loadUrl("https://www.youtube.com/channel/UCEgdi0XIXXZ-qJOFPf4JSKw");
                } else if (position == 4) {
                    mainView.loadUrl("https://www.youtube.com/channel/UCOpNcN46UbXVtpKMrmU4Abg");
                } else if (position == 5) {
                    mainView.loadUrl("https://www.youtube.com/channel/UClgRkhTL3_hImCAmdLfDE4g");
                } else if (position == 6) {
                    mainView.loadUrl("https://www.youtube.com/channel/UCYfdidRxbB8Qhf0Nx7ioOYw");
                } else if (position == 7) {
                    mainView.loadUrl("https://www.youtube.com/channel/UC4R8DWoMoI7CAwX8_LjQHig");
                } else if (position == 8) {
                    mainView.loadUrl("https://www.youtube.com/channel/UCzuqhhs6NWbgTzMuM09WKDQ");
                }

                drawer.closeDrawers();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
            }
        });

        setBookMarkListener(mainView);
    }

    private void setBookMarkListener(final WebView mainView) {
        final Handler handler = new Handler();
        if (mainView != null) {
            handler.post(new Runnable() {
                @Override
                public void run() {
                    if (Launcher.i().isShouldLoad()) {
                        mainView.loadUrl(Launcher.i().getUrl());
                        Launcher.i().setShouldLoad(false);
                    }
                    handler.postDelayed(this, 100);
                }
            });
        }
    }

    private void setDeskTopMode(WebSettings settings, boolean b) {
        if (b) {
            settings.setUserAgentString(settings.getUserAgentString().replace("Mobile", "eliboM").replace("Android", "diordnA"));
        } else {
            settings.setUserAgentString(settings.getUserAgentString().replace("eliboM", "Mobile").replace("diordnA", "Android"));
        }
        mainView.reload();
    }

    private void checkFilePermsOkay(final Context context) {
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                File dirFile = new File(Environment.getExternalStorageDirectory().getPath() + "/YouP3");
                if (!dirFile.exists()) {
                    boolean x = dirFile.mkdir();
                    if (!x) {
                        mainView.destroy();
                        new AlertDialog.Builder(context)
                                .setTitle("Error Accessing Storage")
                                .setMessage("YouP3 can't access your storage. Check if everything is okay in settings")
                                .setCancelable(true)
                                .setPositiveButton("Exit", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                                            finishAndRemoveTask();
                                        } else {
                                            finish();
                                        }
                                    }
                                })
                                .setNeutralButton("Settings", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        startActivity(new Intent(Settings.ACTION_SETTINGS));
                                    }
                                }).show();
                    }
                }
            }
        }, 10000);
    }

    private void setUserForLogging() {
        Crashlytics.setUserName(Build.DEVICE);
        Crashlytics.setUserEmail(getMail(MainActivity.this));
        Crashlytics.setUserIdentifier(Build.FINGERPRINT);
    }

    @Override
    protected void onPause() {
        mainView.onPause();
        super.onPause();
    }

    @Override
    protected void onResume() {
        mainView.onResume();
        super.onResume();
    }

    @Override
    public void onBackPressed() {

        if (mainView.canGoBack()) {
            mainView.goBack();
        } else {
            AlertDialog.Builder alertDialog = new AlertDialog.Builder(MainActivity.this);
            alertDialog.setTitle("Exit");
            alertDialog.setMessage("Close App?");
            alertDialog.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                        finishAndRemoveTask();
                    } else finish();
                }
            });
            alertDialog.setNegativeButton("Nope", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            });
            AlertDialog dialog = alertDialog.create();
            dialog.show();
        }
    }

    @Override
    protected void onDestroy() {
        Helper.clearCache(mainView);
        boolean ended = true;
        for (VideoInfo info : new RealmController().getVideoInfos()) {
            ended = info.isCompleted();
            if (!ended) break;
        }
        if (Queue.getInstance().getTotalQueues() == 0 && ended) {
            stopService(new Intent(MainActivity.this, DownloadExecutorService.class));
            NotificationManagerCompat.from(getApplicationContext()).cancelAll();
        }
        super.onDestroy();
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        int id = item.getItemId();
        if (id == R.id.go_home) {
            mainView.loadUrl("http:youtube.com");
        }
        if (id == R.id.go_me) {
            startActivity(new Intent(MainActivity.this, AboutActivity.class));
        }
        if (id == R.id.downloads) {

            startActivity(new Intent(MainActivity.this, DownloadsActivity.class));
        }
        if (id == settings) {
            View optView = getLayoutInflater().inflate(R.layout.content_settings, null);

            SwitchCompat screenFull = optView.findViewById(R.id.fullScr);
            SwitchCompat remBar = optView.findViewById(R.id.remBar);
            SwitchCompat deskTop = optView.findViewById(R.id.deskMode);
            SwitchCompat autoSch = optView.findViewById(R.id.autoSearch);
            SwitchCompat basicAdv = optView.findViewById(R.id.basicAdv);

            screenFull.setChecked(DataStore.getInstance(getBaseContext()).isFullScreen());
            remBar.setChecked(DataStore.getInstance(getBaseContext()).isRemoveToolbar());
            deskTop.setChecked(DataStore.getInstance(getBaseContext()).isDeskModeEnabled());
            autoSch.setChecked(DataStore.getInstance(getBaseContext()).isAutoSearchEnabled());
            basicAdv.setChecked(!DataStore.getInstance(getBaseContext()).isAdvancedDownloadMode());

            screenFull.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
                    } else {
                        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

                    }
                    DataStore.getInstance(getBaseContext()).setFullScreen(isChecked);
                }
            });

            deskTop.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    clearCookies(mainView, false);
                    setDeskTopMode(mainView.getSettings(), isChecked);
                    DataStore.getInstance(getBaseContext()).setDeskModeEnabled(isChecked);
                }
            });

            screenFull.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
                    } else {
                        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

                    }
                    DataStore.getInstance(getBaseContext()).setFullScreen(isChecked);
                }
            });

            remBar.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        if (getSupportActionBar() != null) {
                            getSupportActionBar().hide();
                        }
                    } else {
                        if (getSupportActionBar() != null) {
                            getSupportActionBar().show();
                        }
                    }
                    DataStore.getInstance(getBaseContext()).setRemoveToolbar(isChecked);
                }
            });

            autoSch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    DataStore.getInstance(getBaseContext()).setAutoSearchEnabled(isChecked);
                }
            });

            basicAdv.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    Toast.makeText(getApplicationContext(), isChecked ? "Basic Mode" : "Advanced Mode", Toast.LENGTH_SHORT).show(); //wow, made it boolean? string1:string2
                    DataStore.getInstance(getBaseContext()).setAdvancedDownloadMode(!isChecked);
                }
            });

            new AlertDialog.Builder(MainActivity.this)
                    .setView(optView)
                    .setTitle("Settings")
                    .setPositiveButton("Okay", null)
                    .setNeutralButton("Report An Error", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Intent x = new Intent(Intent.ACTION_VIEW, Uri.parse("https://github.com/ExploiTR/YouP3/issues"));
                            x.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                            startActivity(x);
                        }
                    })
                    .show();
        }
        if (id == R.id.go_exit) {
            if (mainView != null) mainView.destroy();
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                finishAndRemoveTask();
            } else {
                finish();
            }
        }
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.mux_menu, menu);
        return true;
    }

    /*add fix duplicates*/


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getOrder() == 0) {
            if (mainView.getUrl().contains("v=")) {

                VideoScreen.load(mainView.getUrl())
                        .start(MainActivity.this)
                        .setOnCompleteListener(new VideoScreen.completeListener() {
                            @Override
                            public void onComplete(final String what) {
                                for (final BookMark mark : new BookRealmController().getBookMarks()) {
                                    if (mainView.getUrl().equals(mark.getUrl())) {
                                        canceled = true;
                                        new AlertDialog.Builder(MainActivity.this)
                                                .setTitle("Oops!")
                                                .setMessage("BookMark Already Exists!")
                                                .setPositiveButton("Update", new DialogInterface.OnClickListener() {
                                                    @Override
                                                    public void onClick(DialogInterface dialog, int which) {
                                                        new BookMarkManager().push(
                                                                mark.getId(),
                                                                Helper.getTitle(getBaseContext(), mainView.getUrl()),
                                                                mainView.getUrl(),
                                                                what
                                                        );
                                                        Toast.makeText(getBaseContext(), "Page Got Bookmarked!", Toast.LENGTH_SHORT).show();
                                                    }
                                                }).setNegativeButton("Cancel", null).show();
                                    }
                                }
                                if (!canceled) {
                                    if (mainView.getFavicon() != null) {
                                        new BookMarkManager().push(
                                                new SecureRandom().nextInt(Integer.MAX_VALUE),
                                                Helper.getTitle(getBaseContext(), mainView.getUrl()),
                                                mainView.getUrl(),
                                                what
                                        );
                                    }
                                    Toast.makeText(getBaseContext(), "Page Got Bookmarked!", Toast.LENGTH_SHORT).show();
                                }
                            }
                        });
            } else {
                Toast.makeText(getBaseContext(), "Only Videos Can Be Added To BookMarks :-)", Toast.LENGTH_SHORT).show();
            }
        } else {
            startActivity(new Intent(MainActivity.this, BookMarkActivity.class));
        }
        return true;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_CODE_PERMISSION) {
            if (resultCode != RESULT_OK) {
                Toast.makeText(MainActivity.this, "Can't work without permission", Toast.LENGTH_SHORT).show();
                finish();
            }
        }
        super.onActivityResult(requestCode, resultCode, data);
    }


    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        ConstraintLayout lana = findViewById(R.id.main);
        lana.removeView(mainView);
        DisplayMetrics displaymetrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
        int screenWidth = displaymetrics.widthPixels;
        int screenHeight = displaymetrics.heightPixels;
        lana.addView(mainView, 0,
                new ConstraintLayout.LayoutParams(
                        screenWidth,
                        screenHeight));
        super.onConfigurationChanged(newConfig);
    }

    @Override
    public void onRFACItemLabelClick(int position, RFACLabelItem item) {
        switch (position) {
            case 0:
                Toast.makeText(getApplicationContext(), "Share Current Video", Toast.LENGTH_SHORT).show();
            case 1:
                Toast.makeText(getApplicationContext(),
                        DataStore.getInstance(getBaseContext()).isAdvancedDownloadMode() ?
                                "Show Audio/Video Formats To Download" : "Show Audio Format To Download", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void onRFACItemIconClick(int position, RFACLabelItem item) {
        if (position == 0) {
            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(mainView.getUrl())));
        } else if (position == 1) {
            if (mainView.getUrl().contains("watch?")) {
                mainView.onResume();
                if (urlAll != null) {
                    if (urlAll.equals("")) {
                        Snackbar.make(rfaLayout, "Please Wait,Loading Urls \n Try After Some Time", Snackbar.LENGTH_LONG).show();
                    } else {
                        if (DataStore.getInstance(getBaseContext()).isAdvancedDownloadMode()) {
                            startAdvanceDownloadProcess(mainView.getUrl());
                        } else {
                            new BasicDownloadDetailsFetcher(urlAll, urlTitle, MainActivity.this).execute();
                        }
                    }
                } else {
                    Snackbar.make(rfaLayout, "Empty Url", Snackbar.LENGTH_LONG).show();
                }
            } else {
                Snackbar.make(rfaLayout, "Please Select A Valid Youtube Video ", Snackbar.LENGTH_SHORT).show();
            }
        }
    }

    private void startAdvanceDownloadProcess(String url) {
        Helper.verb(url);
        Toast.makeText(MainActivity.this, "Fetching Details..[Advanced Mode]", Toast.LENGTH_SHORT).show();
        new YouTubeExtractor(MainActivity.this) {
            @Override
            public void onExtractionComplete(final SparseArray<YtFile> ytFiles, final VideoMeta vMeta) {
                final ArrayList<String> downloadableList = new ArrayList<>();
                final ArrayList<Integer> keyList = new ArrayList<>();

                for (int i = 0; i < ytFiles.size(); i++) {
                    int key = ytFiles.keyAt(i);
                    keyList.add(key);
                    if (ytFiles.get(key) != null) {
                        downloadableList.add(
                                getFormattedVideoItemString(
                                        ytFiles.get(key).getFormat().getHeight(),
                                        ytFiles.get(key).getFormat().getAudioBitrate(),
                                        ytFiles.get(key).getFormat().getFps(),
                                        ytFiles.get(key).getFormat().getExt()
                                )
                        );
                    } else {
                        ytFiles.remove(key);
                    }
                }

                new AlertDialog.Builder(MainActivity.this)
                        .setTitle("Video Information")
                        .setMessage("Download : " + vMeta.getTitle() + "\n\n"
                                + "Author : " + vMeta.getAuthor() + "\n\n"
                                + "Length : " + getTimeStamp(vMeta.getVideoLength()) + "\n\n")
                        .setPositiveButton("Show File Choices", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                new AlertDialog.Builder(MainActivity.this)
                                        .setTitle("Select File(S) to Download")
                                        .setItems(downloadableList.toArray(new String[0]), new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {
                                                QueueObject object = new QueueObject();

                                                object.setId(new SecureRandom().nextInt(1024));
                                                object.setName(vMeta.getTitle());
                                                object.setSize(String.valueOf(Helper.getFileSizeFromUrl(ytFiles.get(keyList.get(which)).getUrl())) + "MB");
                                                object.setUrl(ytFiles.get(keyList.get(which)).getUrl());
                                                object.setExt(ytFiles.get(keyList.get(which)).getFormat().getExt());
                                                object.setBasic(false);

                                                Queue.getInstance().add(object);
                                            }
                                        })
                                        .setPositiveButton("Dismiss", null)
                                        .show();
                            }
                        })
                        .setNegativeButton("Dismiss", null)
                        .show();
            }
        }.extract(url, true, true);
    }

    private String getTimeStamp(long value) {
        return String.format(Locale.US, "%d hours,%d min, %d sec", TimeUnit.SECONDS.toHours(value),
                TimeUnit.SECONDS.toMinutes(value - TimeUnit.HOURS.toSeconds(TimeUnit.SECONDS.toHours(value))),
                value - (TimeUnit.MINUTES.toSeconds(
                        TimeUnit.SECONDS.toMinutes(value - TimeUnit.HOURS.toSeconds(TimeUnit.SECONDS.toHours(value)))
                ) + TimeUnit.HOURS.toSeconds(TimeUnit.SECONDS.toHours(value)))
        );
    }

    private static class BasicDownloadDetailsFetcher extends AsyncTask<String, Void, JSONObject> {

        String url, urlTitle;
        WeakReference<Context> mContext;

        BasicDownloadDetailsFetcher(String longUrl, String longTitle, Context context) {
            urlTitle = longTitle;
            url = longUrl;
            mContext = new WeakReference<>(context);
        }

        @Override
        protected void onPreExecute() {
            Toast.makeText(mContext.get(), "Fetching Details..[Basic Mode]", Toast.LENGTH_SHORT).show();
            super.onPreExecute();
        }

        @Override
        protected JSONObject doInBackground(String... strings) {
            final JSONObject object = new JSONObject();
            try {
                object.put("size", Helper.getFileSizeFromUrl(url));
                object.put("title", Helper.getTitle(mContext.get(), urlTitle));
            } catch (JSONException se) {
                se.printStackTrace();
            }
            return object;
        }

        @Override
        protected void onPostExecute(final JSONObject container) {
            String sizeMb = "0", title = "";
            try {
                sizeMb = container.get("size").toString();
                title = container.get("title").toString();
            } catch (JSONException e) {
                e.printStackTrace();
            }

            List<String> list = Arrays.asList(
                    "FileName : " + title,
                    "File Size : " + sizeMb + "MB",
                    "Path : " + Environment.getExternalStorageDirectory() + "/YouP3/");
            CharSequence[] cs = list.toArray(new CharSequence[list.size()]);

            final String finalTitle = title;//copy final temp var
            final String finalSizeMb = sizeMb;//copy final temp var

            new AlertDialog.Builder(mContext.get())
                    .setTitle("Download Audio")
                    .setItems(cs, null)
                    .setPositiveButton("Okay", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            QueueObject object = new QueueObject();
                            object.setId(new SecureRandom().nextInt(1024));
                            object.setName(finalTitle);
                            object.setSize(String.valueOf(finalSizeMb) + "MB");
                            object.setUrl(url);
                            object.setBasic(true);

                            Queue.getInstance().add(object);
                        }
                    })
                    .setNegativeButton("Cancel", null)
                    .show();
        }
    }

}
