package app.exploitr.nsg.youp3;


import android.accounts.Account;
import android.accounts.AccountManager;
import android.app.DownloadManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.http.SslError;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Process;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.constraint.ConstraintLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.SearchView;
import android.support.v7.widget.Toolbar;
import android.telephony.TelephonyManager;
import android.util.Patterns;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.webkit.SslErrorHandler;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.CompoundButton;
import android.widget.FrameLayout;
import android.widget.Switch;
import android.widget.Toast;

import com.comix.overwatch.HiveProgressView;
import com.crashlytics.android.Crashlytics;
import com.google.firebase.analytics.FirebaseAnalytics;

import io.fabric.sdk.android.Fabric;
import java.io.File;
import java.net.URLEncoder;
import java.util.regex.Pattern;

public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {


    private WebView mainView;
    private View mView;
    private Switch mp3only;
    private DrawerLayout drawer;
    private FloatingActionButton fab;
    private HiveProgressView indicator;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        Context mContext = this;

        FirebaseAnalytics mFirebaseAnalytics = FirebaseAnalytics.getInstance(mContext);

        Bundle bundle = new Bundle();
        bundle.putString(FirebaseAnalytics.Param.ITEM_ID, String.valueOf(System.currentTimeMillis()));
        bundle.putString(FirebaseAnalytics.Param.ITEM_NAME, Build.MODEL+":"+Build.USER+":"+Build.DEVICE+":"+Build.FINGERPRINT);
        bundle.putString(FirebaseAnalytics.Param.ITEM_CATEGORY,Build.MANUFACTURER);
        mFirebaseAnalytics.setAnalyticsCollectionEnabled(true);
        mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle);

        Fabric.with(this, new Crashlytics()); //init fabric

        setUserForLogging(); // you know what you're doing


        mainView = new WebView(getApplicationContext());

        if (new DataS(getBaseContext()).isFullScreen()) {
            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        }

        if (new DataS(getBaseContext()).isRemoveToolbar()) {
            if (getSupportActionBar() != null) getSupportActionBar().hide();
        } else {
            if (getSupportActionBar() != null) getSupportActionBar().show();
        }


        indicator = (HiveProgressView) findViewById(R.id.indicator);

        if (!isNetworkAvailable()) {
            mainView.destroy();
            new AlertDialog.Builder(mContext)
                    .setTitle("Network Error :")
                    .setMessage("\nCan't Connect To Server")
                    .setCancelable(false)
                    .setPositiveButton("Exit", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Process.killProcess(Process.myPid());
                        }
                    }).show();
        } else {
            if (isConnectedFast()) {
                try {
                    new UpdateTaskChecker(mContext).execute();
                } catch (Exception e) {
                    e.printStackTrace();
                    e.getSuppressed();
                }
            } else {
                new AlertDialog.Builder(this)
                        .setMessage("Your system reports that your internet connection isn't fast enough. YouP3 might get in problem while downloading.")
                        .setTitle("Network Problem")
                        .setCancelable(false)
                        .setPositiveButton("I Apologize", null)
                        .show();
            }
        }


        File dirFile = new File(Environment.getExternalStorageDirectory().getPath() + "/YouP3");
        if (!dirFile.exists()) {
            boolean x = dirFile.mkdir();
            if (!x) {
                mainView.destroy();
                new AlertDialog.Builder(this)
                        .setTitle("Error Accessing Storage")
                        .setMessage("YouP3 can't access your storage. Check if everything is okay in settings")
                        .setCancelable(true)
                        .setPositiveButton("Exit", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                                    finishAndRemoveTask();
                                } else {
                                    finish();
                                }
                            }
                        })
                        .setNeutralButton("Settings", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                startActivity(new Intent(Settings.ACTION_SETTINGS));
                            }
                        }).show();
            }
        }


        fab = (FloatingActionButton) findViewById(R.id.fab);

        if (new DataS(getBaseContext()).isMp3only()) {
            fab.setImageResource(R.drawable.ic_audio_download);
        } else {
            fab.setImageResource(R.drawable.ic_file_download);
        }

        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if (mainView.getUrl().contains("watch?v=") && (new DataS(getBaseContext()).isMp3only())) {

                    Snackbar.make(view, "Please Wait While Making Request To Server", Snackbar.LENGTH_SHORT).show();

                    new AudioDownloadTask(mView, mainView.getUrl()).execute();

                } else if (mainView.getUrl().contains("watch?v=")) {

                    Snackbar.make(view, "Please Wait While Making Request To Server", Snackbar.LENGTH_SHORT).show();

                    new AllDownloadTask(MainActivity.this, mView).execute(mainView.getUrl());

                } else {
                    Snackbar.make(view, "Please Select A Valid Youtube Video ", Snackbar.LENGTH_SHORT).show();
                }
            }
        });


        drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        ConstraintLayout main = (ConstraintLayout) findViewById(R.id.main);

        mView = main.getRootView();

        ConstraintLayout.LayoutParams mainViewParams = new ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_CONSTRAINT, ConstraintLayout.LayoutParams.MATCH_CONSTRAINT);
        main.addView(mainView, 0, mainViewParams);

        mainView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);
        mainView.setWebChromeClient(new ViewClient());

        final WebSettings settings = mainView.getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setCacheMode(WebSettings.LOAD_NO_CACHE);
        settings.setAppCacheEnabled(true);
        settings.setRenderPriority(WebSettings.RenderPriority.HIGH);
        settings.setDomStorageEnabled(true);
        settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);
        settings.setUseWideViewPort(true);
        settings.setSaveFormData(true);
        settings.setDatabaseEnabled(true);
        settings.setEnableSmoothTransition(true);
        settings.setSupportZoom(true);
        settings.setDisplayZoomControls(true);
        settings.setMediaPlaybackRequiresUserGesture(true);
        settings.setLoadWithOverviewMode(true);

        mainView.loadUrl("https://www.youtube.com/");

        mainView.setWebViewClient(new WebViewClient() {
            @Override
            public void onPageFinished(WebView view, String url) {
                mainView.setVisibility(View.VISIBLE);
                indicator.setVisibility(View.INVISIBLE);
                fab.setVisibility(View.VISIBLE);
            }

            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon) {
                super.onPageStarted(view, url, favicon);
                indicator.setVisibility(View.VISIBLE);
                mainView.setVisibility(View.INVISIBLE);
                fab.setVisibility(View.INVISIBLE);
            }

            @Override
            public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                super.onReceivedError(view, errorCode, description, failingUrl);
            }

            @Override
            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
             super.onReceivedSslError(view, handler, error);
                handler.proceed();
            }

        });


        final SearchView searchView = (SearchView) findViewById(R.id.search_bar_main);
        searchView.setLayoutParams(new Toolbar.LayoutParams(Gravity.RIGHT));
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                if (!query.equals("")) {
                    try {
                        mainView.loadUrl("https:www.youtube.com/results?search_query=" +
                                URLEncoder.encode(query, "UTF-8"));
                    } catch (Exception e) {
                        e.printStackTrace();
                        Process.killProcess(Process.myPid());
                    }
                } else {
                    Toast.makeText(getApplicationContext(), "Please enter some text to search.", Toast.LENGTH_SHORT).show();
                }
                searchView.clearFocus();
                mView.requestFocus();
                return true;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                if (!newText.equals("")) {
                    try {
                        mainView.loadUrl("https:www.youtube.com/results?search_query=" +
                                URLEncoder.encode(newText, "UTF-8"));
                    } catch (Exception e) {
                        e.printStackTrace();
                        Process.killProcess(Process.myPid());
                    }
                } else if (newText.equals("")) {
                    mainView.loadUrl("https:www.youtube.com/");
                }
                return true;
            }
        });


    }

    private void setUserForLogging() {
        Crashlytics.setUserName(Build.DEVICE);
        Crashlytics.setUserEmail(getMail());
        Crashlytics.setUserIdentifier(Build.FINGERPRINT);
    }

    private String getMail() {
        Pattern emailPattern = Patterns.EMAIL_ADDRESS; // API level 8+
        Account[] accounts = AccountManager.get(MainActivity.this).getAccounts();
        for (Account account : accounts) {
            if (emailPattern.matcher(account.name).matches()) {
                return account.name;
            }
        }
        return "empty@nomail.com";
    }

    @Override
    public void onBackPressed() {

        if (mainView.canGoBack()) {
            mainView.goBack();
        } else {
            AlertDialog.Builder alertDialog = new AlertDialog.Builder(MainActivity.this);
            alertDialog.setTitle("Exit");
            alertDialog.setMessage("Close App?");
            alertDialog.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    finish();
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                        finishAndRemoveTask();
                    }
                }
            });
            alertDialog.setNegativeButton("Nope", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            });
            AlertDialog dialog = alertDialog.create();
            dialog.show();
        }
    }

    @Override
    protected void onDestroy() {
        if (mainView != null) {
            mainView.stopLoading();
            mainView.clearHistory();
            mainView.destroy();
            mainView.clearFormData();
            mainView.clearSslPreferences();
            mainView.clearCache(false);
        }
        super.onDestroy();
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        int id = item.getItemId();
        if (id == R.id.go_home) {
            mainView.loadUrl("http:youtube.com");
        }
        if (id == R.id.go_music) {
            mainView.loadUrl("https:www.youtube.com/channel/UC-9-kyTW8ZkZNDHQJ6FgpwQ");
        }
        if (id == R.id.go_me) {
            startActivity(new Intent(MainActivity.this, AboutActivity.class));
        }
        if (id == R.id.downloads) {
            startActivity(new Intent(DownloadManager.ACTION_VIEW_DOWNLOADS));
        }
        if (id == R.id.settings) {
            LayoutInflater inflater = this.getLayoutInflater();
            View settingsView = inflater.inflate(R.layout.content_settings, null);

            Switch screenFull = (Switch) settingsView.findViewById(R.id.fullScr);
            Switch remBar = (Switch) settingsView.findViewById(R.id.remBar);
            mp3only = (Switch) settingsView.findViewById(R.id.mp3only);


            screenFull.setChecked(new DataS(getBaseContext()).isFullScreen());
            remBar.setChecked(new DataS(getBaseContext()).isRemoveToolbar());
            mp3only.setChecked(new DataS(getBaseContext()).isMp3only());


            mp3only.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        new AlertDialog.Builder(MainActivity.this)
                                .setTitle("Wait!")
                                .setMessage("`Mp3 Only Mode` fetches only mp3 files and doesn't supports longer videos and also has some bugs. Do you want to continue?")
                                .setNegativeButton("No", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        mp3only.setChecked(false);
                                    }
                                })
                                .setPositiveButton("Don't Care", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        new DataS(getBaseContext()).setMp3only(true);
                                        fab.setImageResource(R.drawable.ic_audio_download);
                                    }
                                }).show();
                    } else {
                        new DataS(getBaseContext()).setMp3only(false);
                        fab.setImageResource(R.drawable.ic_file_download);
                    }
                }
            });


            screenFull.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
                    } else {
                        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

                    }
                    new DataS(getBaseContext()).setFullScreen(isChecked);
                }
            });

            remBar.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        if (getSupportActionBar() != null) {
                            getSupportActionBar().hide();
                        }
                    } else {
                        if (getSupportActionBar() != null) {
                            getSupportActionBar().show();
                        }
                    }
                    new DataS(getBaseContext()).setRemoveToolbar(isChecked);
                }
            });


            new AlertDialog.Builder(MainActivity.this)
                    .setView(settingsView)
                    .setTitle("Settings")
                    .setPositiveButton("Okay", null)
                    .setNeutralButton("Report An Error", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Intent x = new Intent(Intent.ACTION_VIEW, Uri.parse("https://github.com/ExploiTR/YouP3/issues"));
                            x.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                            startActivity(x);
                        }
                    })
                    .show();
        }
        if (id == R.id.go_exit) {
            if (mainView != null) mainView.destroy();
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                finishAndRemoveTask();
            } else {
                finish();
            }
        }
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onMenuOpened(int featureId, Menu menu) {
        if (!drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.openDrawer(GravityCompat.START);
        } else {
            drawer.closeDrawers();
        }
        return super.onMenuOpened(featureId, menu);
    }

    private boolean isNetworkAvailable() {
        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }

    private boolean isConnectedFast() {
        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo info = connectivityManager.getActiveNetworkInfo();
        return (info != null && info.isConnected() && isConnectionFast(info.getType(), info.getSubtype()));
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }


    private class ViewClient extends WebChromeClient {

        private View mCustomView;
        private FrameLayout mCustomViewContainer;
        private WebChromeClient.CustomViewCallback mCustomViewCallback;
        private FrameLayout.LayoutParams LayoutParameters = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);

        @Override
        public void onShowCustomView(View view, CustomViewCallback callback) {
            if (mCustomView != null) {
                callback.onCustomViewHidden();
                return;
            }
            mCustomViewContainer = new FrameLayout(MainActivity.this);
            mCustomViewContainer.setLayoutParams(LayoutParameters);
            mCustomViewContainer.setBackgroundResource(android.R.color.black);
            view.setLayoutParams(LayoutParameters);
            mCustomViewContainer.addView(view);
            mCustomView = view;
            mCustomViewCallback = callback;
            mCustomViewContainer.setVisibility(View.VISIBLE);
            setContentView(mCustomViewContainer);
        }

        @Override
        public void onHideCustomView() {
            if (mCustomView != null) {
                mCustomView.setVisibility(View.GONE);
                mCustomViewContainer.removeView(mCustomView);
                mCustomView = null;
                mCustomViewContainer.setVisibility(View.GONE);
                mCustomViewCallback.onCustomViewHidden();
            }
        }
    }

    public static boolean isConnectionFast(int type, int subType) {
        if (type == ConnectivityManager.TYPE_WIFI) {
            return true;
        } else if (type == ConnectivityManager.TYPE_MOBILE) {
            switch (subType) {
                case TelephonyManager.NETWORK_TYPE_1xRTT:
                    return false;
                case TelephonyManager.NETWORK_TYPE_CDMA:
                    return false;
                case TelephonyManager.NETWORK_TYPE_EDGE:
                    return false;
                case TelephonyManager.NETWORK_TYPE_EVDO_0:
                    return true;
                case TelephonyManager.NETWORK_TYPE_EVDO_A:
                    return true;
                case TelephonyManager.NETWORK_TYPE_GPRS:
                    return false;
                case TelephonyManager.NETWORK_TYPE_HSDPA:
                    return true;
                case TelephonyManager.NETWORK_TYPE_HSPA:
                    return true;
                case TelephonyManager.NETWORK_TYPE_HSUPA:
                    return true;
                case TelephonyManager.NETWORK_TYPE_UMTS:
                    return true;
                case TelephonyManager.NETWORK_TYPE_EHRPD:
                    return true;
                case TelephonyManager.NETWORK_TYPE_EVDO_B:
                    return true;
                case TelephonyManager.NETWORK_TYPE_HSPAP:
                    return true;
                case TelephonyManager.NETWORK_TYPE_IDEN:
                    return false;
                case TelephonyManager.NETWORK_TYPE_LTE:
                    return true;
                case TelephonyManager.NETWORK_TYPE_UNKNOWN:
                default:
                    return false;
            }
        } else {
            return false;
        }
    }

}


