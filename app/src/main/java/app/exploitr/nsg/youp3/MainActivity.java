package app.exploitr.nsg.youp3;


import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.net.ConnectivityManager;
import android.net.Uri;
import android.net.http.SslError;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.constraint.ConstraintLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.SearchView;
import android.support.v7.widget.SwitchCompat;
import android.support.v7.widget.Toolbar;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.webkit.SslErrorHandler;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceRequest;
import android.webkit.WebResourceResponse;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.CompoundButton;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.comix.overwatch.HiveProgressView;
import com.crashlytics.android.Crashlytics;

import java.io.File;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.List;

import download.utils.Downloader;
import download.utils.UpdateTaskChecker;
import io.fabric.sdk.android.Fabric;
import io.realm.Realm;
import utils.DataStore;
import utils.L;
import utils.NotifyCall;

import static app.exploitr.nsg.youp3.R.id.settings;
import static utils.L.clearCookies;
import static utils.L.getMail;
import static utils.L.verb;

public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {


    private WebView mainView;
    private View mView;
    private DrawerLayout drawer;
    private FloatingActionButton fab, fabShare;
    private HiveProgressView indicator;
    private String urlAll;

    //  public static final boolean debug = false;

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.activity_main);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        final Context mContext = this;

        Fabric.with(this, new Crashlytics());

        Realm.init(this);

        setUserForLogging(); // you know what you're doing

        mainView = new WebView(getApplicationContext());

        //Init Done

        if (new DataStore(getBaseContext()).isFullScreen()) {
            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        }

        if (new DataStore(getBaseContext()).isRemoveToolbar()) {
            if (getSupportActionBar() != null) getSupportActionBar().hide();
        } else {
            if (getSupportActionBar() != null) getSupportActionBar().show();
        }


        indicator = (HiveProgressView) findViewById(R.id.indicator);

        if (!L.isNetworkAvailable(mContext)) {
            mainView.destroy();
            new AlertDialog.Builder(mContext)
                    .setTitle("Network Error :")
                    .setMessage("\nCan't Connect To Server")
                    .setCancelable(false)
                    .setPositiveButton("Exit", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                                finishAndRemoveTask();
                            } else finish();
                        }
                    }).show();
        } else {
            if (L.isConnectedFast(mContext)) {
                try {
                    new UpdateTaskChecker(mContext).execute();
                } catch (Exception e) {
                    e.printStackTrace();
                    e.getSuppressed();
                }
            }
        }


        File dirFile = new File(Environment.getExternalStorageDirectory().getPath() + "/YouP3");
        if (!dirFile.exists()) {
            boolean x = dirFile.mkdir();
            if (!x) {
                mainView.destroy();
                new AlertDialog.Builder(this)
                        .setTitle("Error Accessing Storage")
                        .setMessage("YouP3 can't access your storage. Check if everything is okay in settings")
                        .setCancelable(true)
                        .setPositiveButton("Exit", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                                    finishAndRemoveTask();
                                } else {
                                    finish();
                                }
                            }
                        })
                        .setNeutralButton("Settings", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                startActivity(new Intent(Settings.ACTION_SETTINGS));
                            }
                        }).show();
            }
        }

        fab = (FloatingActionButton) findViewById(R.id.fab);
        fabShare = (FloatingActionButton) findViewById(R.id.fabShare);

        /*Correcting SnackBar Overlapping*/

        LinearLayout layout = (LinearLayout) findViewById(R.id.totalFab);

        DisplayMetrics displaymetrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getRealMetrics(displaymetrics);
        int screenHeight = displaymetrics.heightPixels;
        int screenWidth = displaymetrics.widthPixels;

        layout.setPadding(0, 0, (int) Math.ceil(screenWidth / 100), (screenHeight / 20) + 30);

        if (screenHeight <= 800) {
            fab.setPadding(0, 0, 0, 0);
            fabShare.setPadding(0, 0, 0, 0);

            LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
            lp.setMargins(0, 0, 0, 0);
            fab.setLayoutParams(lp);
            fabShare.setLayoutParams(lp);
        }

        /*Correcting SnackBar Overlapping*/

        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(final View view) {

                if (mainView.getUrl().contains("watch?")) {

                    mainView.onResume();

                    if (urlAll.equals("")) {

                        Snackbar.make(view, "Please Wait , Loading Urls \n Try After Some Time", Snackbar.LENGTH_LONG).show();

                    } else {

                        verb(urlAll);

                        final int sizeMb = L.getFileSizeFromUrl(urlAll);

                        List<String> list = Arrays.asList(
                                "FileName : " + mainView.getTitle(),
                                "File Size : " + sizeMb + "MB",
                                "Path : " + Environment.getExternalStorageDirectory() + "/YouP3/");

                        CharSequence[] cs = list.toArray(new CharSequence[list.size()]);

                        new AlertDialog.Builder(MainActivity.this)
                                .setTitle("New Download")
                                .setItems(cs, null)
                                .setPositiveButton("Okay", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {

                                        new Downloader(mainView.getTitle(), "mp3", mContext, mView).checkAndGet(urlAll, String.valueOf(sizeMb) + "MB");
                                    }
                                })
                                .setNegativeButton("Cancel", null)
                                .show();
                    }

                } else {
                    Snackbar.make(view, "Please Select A Valid Youtube Video ", Snackbar.LENGTH_SHORT).show();
                }
            }
        });

        fabShare.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(mainView.getUrl())));
            }
        });

        drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        ConstraintLayout main = (ConstraintLayout) findViewById(R.id.main);

        mView = main.getRootView();

        ConstraintLayout.LayoutParams mainViewParams = new ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_CONSTRAINT, ConstraintLayout.LayoutParams.MATCH_CONSTRAINT);
        main.addView(mainView, 0, mainViewParams);

        mainView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);
        mainView.setWebChromeClient(new WebChromeClient());

        WebSettings settings = mainView.getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setCacheMode(WebSettings.LOAD_NO_CACHE);
        settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);
        settings.setUseWideViewPort(true);
        settings.setSupportZoom(true);
        settings.setDisplayZoomControls(true);
        settings.setMediaPlaybackRequiresUserGesture(true);
        settings.setLoadWithOverviewMode(true);
        settings.setBuiltInZoomControls(true);
        settings.setUseWideViewPort(true);

        setDeskTopMode(mainView.getSettings(), new DataStore(getBaseContext()).isDeskModeEnabled());


        /*
        Add ability to parse shared link
          */
        if (getIntent().getAction().equals(Intent.ACTION_VIEW)) {
            //User gave me some data / let's process it.
            final String localLink = getIntent().getDataString();
            if (localLink.contains("youtu.be")) {
                mainView.loadUrl("https://www.youtube.com/watch?v=" + localLink.split("be/")[1]);
            } else {
                mainView.loadUrl(localLink);
            }
            Snackbar.make(fab, "Loading Given YouTube URL", Snackbar.LENGTH_SHORT).show();
        } else {
            mainView.loadUrl("https://www.youtube.com/");
        }

        mainView.setWebViewClient(new WebViewClient() {
            @Override
            public void onPageFinished(WebView view, String url) {
                mainView.setVisibility(View.VISIBLE);
                indicator.setVisibility(View.INVISIBLE);
                fab.setVisibility(View.VISIBLE);
                fabShare.setVisibility(View.VISIBLE);
            }

            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon) {
                indicator.setVisibility(View.VISIBLE);
                mainView.setVisibility(View.INVISIBLE);
                fab.setVisibility(View.INVISIBLE);
                fabShare.setVisibility(View.INVISIBLE);
            }

            @Override
            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                super.onReceivedSslError(view, handler, error);
                handler.proceed();
            }


            @TargetApi(Build.VERSION_CODES.LOLLIPOP)
            @Override
            public WebResourceResponse shouldInterceptRequest(WebView view, final WebResourceRequest request) {

                if (request.getUrl().toString().matches(".*googlevideo.com/videoplayback.*")) {
                    new Handler(Looper.getMainLooper()).post(new Runnable() {
                        @Override
                        public void run() {

                            String urlBob = request.getUrl().toString().replaceAll("&range=[\\d-]*&", "&");
                            if (urlBob.contains("mime=audio") && urlBob.contains("buf=0")) {
                                urlAll = urlBob;
                            }
                        }
                    });

                }

                return super.shouldInterceptRequest(view, request);
            }

            @SuppressWarnings("deprecation")
            @Override
            public WebResourceResponse shouldInterceptRequest(WebView view, final String url) {

                if (url.matches(".*googlevideo.com/videoplayback.*")) {
                    new Handler(Looper.getMainLooper()).post(new Runnable() {
                        @Override
                        public void run() {

                            String urlBob = url.replaceAll("&range=[\\d-]*&", "&");
                            if (urlBob.contains("mime=audio") && urlBob.contains("buf=0")) {
                                urlAll = urlBob;
                            }
                        }
                    });

                }
                return super.shouldInterceptRequest(view, url);
            }

        });


        final SearchView searchView = (SearchView) findViewById(R.id.search_bar_main);
        searchView.setLayoutParams(new Toolbar.LayoutParams(Gravity.END));
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                if (!query.equals("")) {
                    try {
                        mainView.loadUrl("https:www.youtube.com/results?search_query=" +
                                URLEncoder.encode(query, "UTF-8"));
                    } catch (Exception e) {
                        e.printStackTrace();
                        e.getSuppressed();
                    }
                } else {
                    Toast.makeText(getApplicationContext(), "Please enter some text to search.", Toast.LENGTH_SHORT).show();
                }
                searchView.clearFocus();
                mView.requestFocus();
                return true;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                if (new DataStore(getBaseContext()).isAutoSearchEnabled()) {
                    if (!newText.equals("")) {
                        try {
                            mainView.loadUrl("https:www.youtube.com/results?search_query=" +
                                    URLEncoder.encode(newText, "UTF-8"));
                        } catch (Exception e) {
                            e.printStackTrace();
                            e.getSuppressed();
                        }
                    } else if (newText.equals("")) {
                        mainView.loadUrl("https:www.youtube.com/");
                    }
                }
                return true;
            }
        });
    }

    /**
     * Untested | Can call exception again in Handler.post
     */

    private void setDeskTopMode(WebSettings settings, boolean b) {
        if (b) {
            settings.setUserAgentString(settings.getUserAgentString().replace("Mobile", "eliboM").replace("Android", "diordnA"));
        } else {
            settings.setUserAgentString(settings.getUserAgentString().replace("eliboM", "Mobile").replace("diordnA", "Android"));
        }
        mainView.reload();
    }

    private void setUserForLogging() {
        Crashlytics.setUserName(Build.DEVICE);
        Crashlytics.setUserEmail(getMail(MainActivity.this));
        Crashlytics.setUserIdentifier(Build.FINGERPRINT);
    }


    @Override
    protected void onPause() {
        mainView.onPause();
        super.onPause();
    }

    @Override
    protected void onResume() {
        mainView.onResume();
        super.onResume();
    }

    @Override
    public void onBackPressed() {

        if (mainView.canGoBack()) {
            mainView.goBack();
        } else {
            AlertDialog.Builder alertDialog = new AlertDialog.Builder(MainActivity.this);
            alertDialog.setTitle("Exit");
            alertDialog.setMessage("Close App?");
            alertDialog.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                        finishAndRemoveTask();
                    } else finish();
                }
            });
            alertDialog.setNegativeButton("Nope", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            });
            AlertDialog dialog = alertDialog.create();
            dialog.show();
        }
    }

    @Override
    protected void onDestroy() {

        clearCookies(mainView, true);

        new NotifyCall(this, "", "").cancelAll();

        super.onDestroy();
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        int id = item.getItemId();
        if (id == R.id.go_home) {
            mainView.loadUrl("http:youtube.com");
        }
        if (id == R.id.go_music) {
            mainView.loadUrl("https:www.youtube.com/channel/UC-9-kyTW8ZkZNDHQJ6FgpwQ");
        }
        if (id == R.id.go_me) {
            startActivity(new Intent(MainActivity.this, AboutActivity.class));
        }
        if (id == R.id.downloads) {

            startActivity(new Intent(MainActivity.this, DownloadsActivity.class));
        }
        if (id == settings) {

            View optView = getLayoutInflater().inflate(R.layout.content_settings, null);

            SwitchCompat screenFull = (SwitchCompat) optView.findViewById(R.id.fullScr);
            SwitchCompat remBar = (SwitchCompat) optView.findViewById(R.id.remBar);
            SwitchCompat deskTop = (SwitchCompat) optView.findViewById(R.id.deskMode);
            SwitchCompat autoSch = (SwitchCompat) optView.findViewById(R.id.autoSearch);

            screenFull.setChecked(new DataStore(getBaseContext()).isFullScreen());
            remBar.setChecked(new DataStore(getBaseContext()).isRemoveToolbar());
            deskTop.setChecked(new DataStore(getBaseContext()).isDeskModeEnabled());
            autoSch.setChecked(new DataStore(getBaseContext()).isAutoSearchEnabled());

            screenFull.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
                    } else {
                        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

                    }
                    new DataStore(getBaseContext()).setFullScreen(isChecked);
                }
            });

            deskTop.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    clearCookies(mainView, false);
                    setDeskTopMode(mainView.getSettings(), isChecked);
                    new DataStore(getBaseContext()).setDeskModeEnabled(isChecked);
                }
            });


            screenFull.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
                    } else {
                        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

                    }
                    new DataStore(getBaseContext()).setFullScreen(isChecked);
                }
            });

            remBar.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        if (getSupportActionBar() != null) {
                            getSupportActionBar().hide();
                        }
                    } else {
                        if (getSupportActionBar() != null) {
                            getSupportActionBar().show();
                        }
                    }
                    new DataStore(getBaseContext()).setRemoveToolbar(isChecked);
                }
            });


            autoSch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    new DataStore(getBaseContext()).setAutoSearchEnabled(isChecked);
                }
            });


            new AlertDialog.Builder(MainActivity.this)
                    .setView(optView)
                    .setTitle("Settings")
                    .setPositiveButton("Okay", null)
                    .setNeutralButton("Report An Error", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Intent x = new Intent(Intent.ACTION_VIEW, Uri.parse("https://github.com/ExploiTR/YouP3/issues"));
                            x.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                            startActivity(x);
                        }
                    })
                    .show();
        }
        if (id == R.id.go_exit) {
            if (mainView != null) mainView.destroy();
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                finishAndRemoveTask();
            } else {
                finish();
            }
        }
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onMenuOpened(int featureId, Menu menu) {
        if (!drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.openDrawer(GravityCompat.START);
        } else {
            drawer.closeDrawers();
        }
        return super.onMenuOpened(featureId, menu);
    }


    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }

    public static boolean isConnectionFast(int type, int subType) {
        if (type == ConnectivityManager.TYPE_WIFI) {
            return true;
        } else if (type == ConnectivityManager.TYPE_MOBILE) {
            switch (subType) {
                case TelephonyManager.NETWORK_TYPE_1xRTT:
                    return false;
                case TelephonyManager.NETWORK_TYPE_CDMA:
                    return false;
                case TelephonyManager.NETWORK_TYPE_EDGE:
                    return false;
                case TelephonyManager.NETWORK_TYPE_EVDO_0:
                    return true;
                case TelephonyManager.NETWORK_TYPE_EVDO_A:
                    return true;
                case TelephonyManager.NETWORK_TYPE_GPRS:
                    return false;
                case TelephonyManager.NETWORK_TYPE_HSDPA:
                    return true;
                case TelephonyManager.NETWORK_TYPE_HSPA:
                    return true;
                case TelephonyManager.NETWORK_TYPE_HSUPA:
                    return true;
                case TelephonyManager.NETWORK_TYPE_UMTS:
                    return true;
                case TelephonyManager.NETWORK_TYPE_EHRPD:
                    return true;
                case TelephonyManager.NETWORK_TYPE_EVDO_B:
                    return true;
                case TelephonyManager.NETWORK_TYPE_HSPAP:
                    return true;
                case TelephonyManager.NETWORK_TYPE_IDEN:
                    return false;
                case TelephonyManager.NETWORK_TYPE_LTE:
                    return true;
                case TelephonyManager.NETWORK_TYPE_UNKNOWN:
                default:
                    return false;
            }
        } else {
            return false;
        }
    }

}


